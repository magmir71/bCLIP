import os
import pandas as pd
import shutil
import yaml
from shlex import quote
from typing import Tuple
from snakemake.utils import validate

## Preparations

configfile: "config.yaml"
localrules:  finish, create_symb_links_for_demultiplexed_reads
wildcard_constraints: lane = config["lane_constraints"]

# Get sample table
samples = pd.read_csv(
    config["samples_file"],
    header=0,
    index_col=0,
    comment='#',
    engine='python',
    sep="\t")

# functions
def get_demultiplexed_sample_paths(wildcards):
    '''
        get generated paths of demultiplexed samples from a checkpoint
    '''
    ck_output = checkpoints.Demultiplex.get(lane = samples.loc[wildcards.sample, 'lane_name']).output[0]
    return os.path.join(ck_output, "{sample}.demultiplexed.fastq.gz")

rule finish:
    input:
        umis_done = expand(os.path.join(config["output_dir"],
        "extract_umis",
        "{lane}.extract_umis.fastq.gz"),
        lane = list(samples["lane_name"].unique())),
        demultiplexed_samples=expand(os.path.join(config["output_dir"],
        "samples","{sample}","fastq","{sample}.fastq.gz"),
        sample = list(samples.index)),
        max_read_lengths = expand(os.path.join(
            config["output_dir"],
            "samples",
            "{sample}",
            "read_length",
            "{sample}.max_read_length.txt"),
        sample = list(samples.index)),

current_rule = "extract_umi"
        
rule extract_umi:
    '''
        Extract UMIs and add them in the sequence header if the fastq file has associated kmers 
        otherwise create a dummy file
    '''
    input:
        reads = lambda wildcards: samples.loc[samples["lane_name"] == wildcards.lane, "lane_file"].iloc[0]
    output:
        reads = os.path.join(
            config["output_dir"],
            "extract_umis",
            "{lane}.extract_umis.fastq.gz")

    params:
        output_dir = os.path.join(config["output_dir"],"extract_umis"),
        log = os.path.join(
            config["output_dir"],
            "extract_umis",
            "{lane}.extractumis.log"),
        kmer = lambda wildcards:
            samples.loc[samples["lane_name"] == wildcards.lane, "kmer"].iloc[0]

    singularity:
        "docker://quay.io/biocontainers/umi_tools:1.1.2--py38h4a8c8d9_0"

    threads: 1

    log:
        os.path.join(
            config["local_log"],
            "extract_umis__{lane}.log")

    shell:
        """(mkdir -p {params.output_dir}; \
        if [[ "{params.kmer}" =~ [^Xx[:space:]] ]]; then \
        umi_tools extract \
        --stdin={input.reads} \
        --bc-pattern={params.kmer} \
        --log={params.log} \
        --stdout {output.reads}; else \
        ln -f -s {input.reads} {output.reads}; fi) &> {log}"""
        
checkpoint Demultiplex:
    '''
        Demultiplex samples 
    '''
    input:
        reads = os.path.join(
            config["output_dir"],
            "extract_umis",
            "{lane}.extract_umis.fastq.gz"),
    output:
        outdir = directory(os.path.join(
            config["output_dir"],
            "demultiplex",
            "{lane}")),
    params:
        barcodes = lambda wildcards: samples.loc[samples["lane_name"] == wildcards.lane, "barcode_file"].iloc[0],
        first_sample = lambda wildcards: samples.loc[samples["lane_name"] == wildcards.lane].index[0],
        error_rate = config["demux_error_rate"],
        kmer = lambda wildcards: samples.loc[samples["lane_name"] == wildcards.lane, "kmer"].iloc[0],
        
    singularity:
        "docker://quay.io/biocontainers/cutadapt:3.4--py37h73a75cf_1"

    threads: 10

    log:
        os.path.join(config["local_log"],"demultiplex__{lane}.log")

    shell:
        """(mkdir -p {output.outdir}; \
        if [[ "{params.kmer}" =~ [^Xx[:space:]] ]]; then \
        cutadapt \
        -e {params.error_rate} \
        --no-indels \
        -g file:{params.barcodes} \
        -o {output.outdir}/{{name}}.demultiplexed.fastq.gz \
        -j {threads} \
        {input.reads}; else \
        ln -f -s {input.reads} {output.outdir}/{params.first_sample}.demultiplexed.fastq.gz; fi) &> {log}"""

        
current_rule = "create_symb_links_for_demultiplexed_reads"

rule create_symb_links_for_demultiplexed_reads:
    '''
        create symbolyc links for demultiplexed reads
    '''
    input:
        reads = get_demultiplexed_sample_paths,
    output:
        moved_reads = os.path.join(
            config["output_dir"],
            "samples",
            "{sample}",
            "fastq",
            "{sample}.fastq.gz"),
    params:
        outdir = directory(os.path.join(config["output_dir"],"samples","{sample}","fastq")),
    threads: 1
    log:
        os.path.join(config["local_log"],"create_symb_links_for_demultiplexed_reads__{sample}.log")

    shell:
        """(mkdir -p {params.outdir}; ln -f -s {input.reads} {output.moved_reads}) &> {log}"""